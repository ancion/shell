#!/bin/bash

:<<!
------------------------------------------------------------------------------------
shell 中的数字， 
1、shell 中内置了随机数变量
2、shell 中的序列
3、shell 中本来是不支持小数的运算的，需要借助外部的计算器程序来完成小数的计算
!


# --------------------------------
# 1、shell 内置的随机数环境变量
# RANDOM 随机数的范围是 0-32767
echo $RANDOM
# 扩大随机数的范围[0,1073676289]
echo $[RANDOM*RANDOM]
# 取 100 以内的随机数[0,100]
echo $[RANDOM%100]
# 控制起始位置[50,100]
echo $[RANDOM%50 + 50]

# --------------------------------
# 2、shell 中的序列
# 使用大括号 {start..end[..step]} 
# step可以省略，默认步长 1 
echo {1..10..2}
# 倒序列
echo {10..1}
# -------------
# 使用 seq 来构建序列，
# seq [start] [step] end   
# 默认起始位置为1，步长为 1，不使用默认需要进行指定，使用步长必须指定起始位置 
# -s 指定序列间的分隔符，默认是换行，需要空格需要指定
# -w 需要使用等宽的序列，不足位置补 0
# 输出 1-10 序列
seq 10
# 输出 5-10 序列
seq -s " " 5 10
# 输出 5-20 序列，步长2, 空格间隔，等宽显示 
seq -s " " -w 5 2 20

# ----------------------------------
# 3、shell 中小数的操作
# 直接在bash 中输入 bc 可以进入交互式的运算，quit 退出
# 接收管道传递的运算表达式,多个运算式使用; 隔开。
# scale=4 指定保留的小数位数,
A=3.141
echo "scale=4;$A*4;5/3" | bc

# 小数的比较, 真值返回 1， 假值返回 0
B=3.151

# 支持的运算符号 < > != == <= >=
echo "$A <= $B" | bc
echo "$A >= $B" | bc
echo "$A == $B" | bc
echo "$A != $B" | bc


